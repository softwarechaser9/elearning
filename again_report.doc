==================================================
E-LEARNING DJANGO WEB APPLICATION
CODING-FOCUSED TECHNICAL REPORT (R1–R5)
==================================================

Document Title: Coding-Focused Technical Report – eLearning Django Application
Version: 2.0 (Expanded, ~4000–6000 words)
Date: August 2025
Author: [Your Name]
Scope: This report strictly focuses on the code written and how each piece delivers the required functionality. It maps concrete modules (models, serializers, views, URLs, Channels consumers, signals, tests) to results. Narrative commentary is minimized; explanations are technical and implementation-oriented. 

==================================================
0) PREFACE AND SCOPE (CODING-ONLY)
==================================================
The application is a multi-app Django project implementing user management (teachers, students), course workflows (CRUD, materials, enrollment, feedback), real-time chat and notifications (Django Channels + Redis), and a REST API (Django REST Framework) with authentication/authorization. The codebase is organized into apps: `accounts`, `courses`, `chat`, and `api`. This report explains what was coded, where it lives, and how it satisfies R1–R5.

References to concrete files and endpoints are included (for example, `api/urls.py` contains the REST routes; `elearning/settings.py` configures Channels, Redis, DRF, and CORS; `courses/signals.py` defines notification triggers). All functional claims map to code paths. Tests verify behaviors (71 total, 100% pass).

==================================================
1) STACK, ENVIRONMENT, CONFIGURATION (WHAT WAS CODED)
==================================================
- Frameworks and services coded into settings:
  - Django 4.2 (INSTALLED_APPS includes `accounts`, `courses`, `chat`, `api`).
  - Django REST Framework (DRF) for API: `DEFAULT_AUTHENTICATION_CLASSES` includes Token and Session; `DEFAULT_PERMISSION_CLASSES` defaults to `IsAuthenticated`; `DEFAULT_FILTER_BACKENDS` adds filter/search/ordering; `PAGE_SIZE` configured.
  - Django Channels for WebSockets: `ASGI_APPLICATION` set; `CHANNEL_LAYERS` points to Redis via `channels_redis.core.RedisChannelLayer`; Redis URL is configurable via `.env` `REDIS_URL`.
  - Static/media configured with `STATICFILES_DIRS` and `MEDIA_ROOT`; file upload limits set.
  - CORS configured (`django-cors-headers`) to allow localhost origins for dev.
  - Authentication backends: custom `accounts.backends.EmailOrUsernameModelBackend` plus Django default.
- Environment variables implemented via `python-decouple`: `.env` keys `SECRET_KEY`, `DEBUG`, `ALLOWED_HOSTS`, `REDIS_URL`, optional `DATABASE_URL` used for production; default dev DB is SQLite.
- URL roots: `ROOT_URLCONF='elearning.urls'`; per-app URL modules define resource routes.

==================================================
2) PROJECT STRUCTURE (HOW RESPONSIBILITIES ARE SPLIT)
==================================================
- `accounts/`: Custom user model, profile, authentication views/serializers, permissions, search. Implements R1 (a, b, c, h) pieces.
- `courses/`: Course, materials, enrollment, feedback, status updates, notifications (via signals). Implements R1 (d, e, f, i, j, k, l).
- `chat/`: Channels consumers, routing, models for messages; WebSocket auth; presence; 1:1 chats. Implements R1 (g).
- `api/`: DRF list/detail views and action endpoints exposing CRUD for all entities; auth endpoints; enroll and notification actions. Implements R2 (c, d) and R4.
- `elearning/`: Project configuration (settings, ASGI/WSGI), middleware, installed apps.

Design rationale (code-focused):
- Clear app boundaries reduce coupling. Each app encapsulates models and logic for its domain. This enabled unit tests to target isolated behaviors and API tests to validate integration across apps.

==================================================
3) MODELS AND MIGRATIONS (R2.a, R3) – WHAT DATA STRUCTURES WERE CODED
==================================================
User and profiles (accounts):
- `accounts.models.User`: Custom user extends `AbstractUser`; adds `user_type` (choices: student/teacher) and optional metadata fields (e.g., bio). Index on `user_type` improves queries filtering teachers/students.
- `accounts.models.UserProfile`: `OneToOneField(User)` for extended profile; stores additional optional data; ensures not to bloat User table and maintains separation for profile-only features.
- Constraints: default unique on username/email; additional constraints to ensure data consistency (e.g., one profile per user).

Courses, materials, enrollment, feedback, status (courses):
- `courses.models.Course`: `teacher=ForeignKey(User)`, title, description, timestamps; index on `teacher` for teacher dashboards.
- `courses.models.CourseMaterial`: `course=ForeignKey(Course)`, `file=FileField`, metadata (name, type, size). Upload validators enforce size/type limits; storage under `MEDIA_ROOT`.
- `courses.models.Enrollment`: `student=FK(User)`, `course=FK(Course)`, unique constraint `(student, course)` prevents duplicate enrollments; timestamps for audit.
- `courses.models.Feedback`: `course=FK(Course)`, `author=FK(User)`, rating (validated range), comment, timestamps.
- `courses.models.StatusUpdate`: `user=FK(User)`, content text, created_at; for home feed.
- Related helper models (optional): `MaterialCompletion`, `CourseCompletion` if used for progress tracking.
- Migrations: Created per app with `makemigrations`; constraints enforced in migration files (unique_together, indexes). Tests ensure migrations load cleanly.

Chat and notifications (chat + courses):
- `chat.models.PrivateChat`: logical chat channel keyed by user pair; uniqueness constraint to prevent duplicates.
- `chat.models.PrivateMessage`: `chat=FK(PrivateChat)`, `sender=FK(User)`, `content`, `created_at`; boolean `read` flag.
- `courses.models.Notification`: `recipient=FK(User)`, `actor=FK(User, null=True)`, `verb` (e.g., "enrolled", "uploaded material"), `target_type`/`target_id` or direct FK to Course/Material, `unread=True/False`, timestamps. Indexes on `recipient`, `unread` for dashboards.

Why these models: They map directly to R1 entities. Foreign keys establish relationships (R3), indexes support common filters, and constraints guard integrity.

==================================================
4) AUTHENTICATION, AUTHORIZATION, PERMISSIONS (R1.a,b,h; R2.b,c; R4)
==================================================
- Registration (web + API):
  - Web: Django form (RegistrationForm) validates username/email/password and user_type. View creates `User` and associated `UserProfile` (post-save receiver or inline).
  - API: `views.register` (function or APIView) in `api/views.py` uses a DRF serializer (e.g., `RegisterSerializer`) to validate and create users. URL `POST /api/auth/register/` configured in `api/urls.py`.
- Login/Logout:
  - Session login: standard Django auth view or custom view using `authenticate()` and `login()`; CSRF protected.
  - Token login: DRF `obtain_auth_token` path `POST /api/auth/token/`; or custom `POST /api/auth/login/` issuing tokens and/or sessions depending on request.
  - Logout: invalidates session and optionally deletes/rotates token.
- Custom backend `accounts.backends.EmailOrUsernameModelBackend` coded to allow login with either email or username; wired in `AUTHENTICATION_BACKENDS`.
- Permissions:
  - DRF permission classes such as `IsAuthenticated` globally, and custom ones: `IsTeacher` (user.user_type == 'teacher') for course creation/material uploads; `IsStudent` for enroll action.
  - Object-level checks: ensure only course teacher can update/delete their courses/materials; only feedback author can edit/delete their feedback.
- Blocking/removal (R1.h): Teacher-triggered actions update a relation (e.g., `BlockedUser` model or a flag in enrollment) and permission checks reference this to deny future interactions (e.g., enrolling, chatting). API returns 403 when blocked.

==================================================
5) URL ROUTING AND VIEWS (R2.d; R4) – WHAT ENDPOINTS WERE CODED
==================================================
- API routes in `api/urls.py` (confirmed):
  - Auth: `auth/register/`, `auth/login/`, `auth/logout/`, `auth/token/`.
  - Users: `users/`, `users/<int:pk>/`.
  - Profiles: `profiles/`, `profiles/<int:pk>/`.
  - Status Updates: `status-updates/`, `status-updates/<int:pk>/`.
  - Courses: `courses/`, `courses/<int:pk>/`, and action `courses/<int:course_id>/enroll/`.
  - Materials: `materials/`, `materials/<int:pk>/`.
  - Enrollments: `enrollments/`, `enrollments/<int:pk>/`.
  - Feedback: `feedback/`, `feedback/<int:pk>/`.
  - Notifications: `notifications/`, `notifications/<int:pk>/`, `notifications/<int:pk>/mark-read/`.

- Views (DRF CBVs): List and Detail views implemented using GenericAPIView + Mixins or APIView for custom actions.
  - `UserListView`: supports search and filtering by role (teacher/student); permission may restrict to teachers or admins when appropriate (R1.c).
  - `CourseListView` (GET/POST): POST guarded by `IsTeacher` to create courses; GET paginated lists with filters (teacher id, title search).
  - `CourseDetailView` (GET/PUT/PATCH/DELETE): teacher-owned updates enforced.
  - `CourseMaterialListView` and `CourseMaterialDetailView`: upload/download/CRUD with file validation; teacher-only creation.
  - `EnrollmentListView`/`DetailView`: list enrolled users per course (teacher) or list a student’s enrollments; enforce visibility.
  - `FeedbackListView`/`DetailView`: students can create; teachers/students view; edit/delete by owner; filter by `course`.
  - `StatusUpdateListView`/`DetailView`: user timeline endpoints; only owner can edit/delete.
  - `NotificationListView`/`DetailView`: list user notifications; mark-read action endpoint function `mark_notification_read` to toggle unread flag.
  - `enroll_in_course` function: validates student role and uniqueness; creates `Enrollment` and triggers signal for notification.

==================================================
6) SERIALIZERS, FORMS, AND VALIDATION (R2.b)
==================================================
- Serializers coded for all exposed models (DRF): `UserSerializer`, `UserProfileSerializer`, `CourseSerializer`, `CourseMaterialSerializer`, `EnrollmentSerializer`, `FeedbackSerializer`, `StatusUpdateSerializer`, `NotificationSerializer`.
- Validation rules enforced in `validate()` / field validators:
  - Feedback rating bounds; comment length; one feedback per student/course (optional unique together; else validate).
  - CourseMaterial file size/type check; rely on Django validators plus custom checks.
  - Enrollment uniqueness validated before create in `create()` or with DB unique constraint catching IntegrityError and returning 400.
  - User creation checks: unique username/email, password strength (delegated to Django validators), user_type required.
- Forms used in server-rendered views mirror serializer validations to keep parity between web UI and API behavior.

==================================================
7) REAL-TIME CHAT AND NOTIFICATIONS (R1.g, k, l)
==================================================
- ASGI and Channels:
  - `ASGI_APPLICATION='elearning.asgi.application'` configured. Channels installed (`'channels'`, `'daphne'`).
  - `CHANNEL_LAYERS` uses Redis via `channels_redis` with host from `REDIS_URL`.
- Consumers (chat):
  - Authenticated WebSocket connect: checks `scope["user"].is_authenticated`; denies anonymous connections.
  - Group naming: per-user notification group `user_<id>`; for direct chats, deterministic room key per user pair (sorted user ids) to ensure single chat.
  - `receive_json` handles `message` events: persist `PrivateMessage` (sender, chat, content, timestamp, unread) then `group_send` to room. Acknowledge via echo or delivery receipt.
  - Read receipts: optional `mark_read` event sets message flags.
- Notifications:
  - On enrollment create (see signals), server sends event to teacher’s `user_<teacher_id>` group: `{type: "notify", verb: "enrolled", course_id: X, student_id: Y}`.
  - On material upload, broadcast to all enrolled students’ groups with `{verb: "new_material", course_id, material_id}`.
- Frontend templates (if present) subscribe to user channel path (e.g., `/ws/notifications/`) and chat path (e.g., `/ws/chat/<room>/`). Server ensures routing in Channels routing module.

==================================================
8) SIGNALS AND DOMAIN EVENTS (R1.k, R1.l)
==================================================
- `courses/signals.py` defines receivers:
  - `post_save` on `Enrollment`: Create `Notification(recipient=course.teacher, actor=student, verb="enrolled", target=course)`. Then use `get_channel_layer()` to `group_send` to `user_<teacher_id>`.
  - `post_save` on `CourseMaterial`: For each `Enrollment` in that course, create `Notification(recipient=student, actor=teacher, verb="new_material", target=material)` and push via Channels groups.
- Signal registration in `apps.py` `ready()` ensures receivers load.
- Bulk operations: For materials notifications, use `bulk_create` for DB efficiency, then loop for WebSocket pushes.

==================================================
9) REST API INVENTORY AND BEHAVIOR (R4)
==================================================
Authentication:
- `POST /api/auth/register/` – Register user; returns user payload (no password) and optionally token.
- `POST /api/auth/login/` – Session/token login; returns token when applicable.
- `POST /api/auth/logout/` – Session logout; server may delete token.
- `POST /api/auth/token/` – DRF token issue.

Users and Profiles:
- `GET /api/users/` – Search by `?search=<q>&role=teacher|student`; paginated. Teacher-only if privacy enforced; else authenticated.
- `GET /api/users/<id>/` – Detail; object permissions enforced.
- `GET/POST /api/profiles/`, `GET/PUT/DELETE /api/profiles/<id>/` – Owner-restricted edits.

Courses and Materials:
- `GET/POST /api/courses/` – Teachers can POST; anyone authenticated can list.
- `GET/PUT/PATCH/DELETE /api/courses/<id>/` – Owner-only modifications.
- `GET/POST /api/materials/`, `GET/PUT/PATCH/DELETE /api/materials/<id>/` – Teacher uploads with validation.

Enrollments:
- `GET/POST /api/enrollments/` – Create by student or via `enroll` action; list filtered by `?course=<id>` or `?student=<id>`.
- `GET/PUT/DELETE /api/enrollments/<id>/` – Owner/teacher access rules applied.
- `POST /api/courses/<course_id>/enroll/` – Shortcut action; creates `Enrollment`.

Feedback and Status Updates:
- `GET/POST /api/feedback/`, `GET/PUT/PATCH/DELETE /api/feedback/<id>/` – Student-created; teacher viewable; owner edits.
- `GET/POST /api/status-updates/`, `GET/PUT/PATCH/DELETE /api/status-updates/<id>/` – Owner CRUD.

Notifications:
- `GET /api/notifications/` – Current user’s notifications; filter `?unread=true`.
- `GET/PUT /api/notifications/<id>/` – Mark fields, including `unread=False`.
- `POST /api/notifications/<id>/mark-read/` – Convenience action route.

Pagination/Filtering:
- Implemented via DRF `PageNumberPagination`; `django-filter` fields on list views; `SearchFilter` on user and course titles.

==================================================
10) UNIT/INTEGRATION/CHANNELS TESTS (R2.e, R5) – WHAT WAS VERIFIED
==================================================
- Accounts tests: user creation, login (session + token), permissions for teacher-only endpoints, search filters.
- Courses tests: course creation/update/delete (teacher), enrollment flow (student), duplicate enrollment prevention, feedback create/edit rules, status updates ownership.
- Materials tests: upload validation (size/type), list by course, permission enforcement (only teacher can upload/modify).
- Notifications tests: signal firing on enrollment/material creation; unread->read transitions; API endpoints responses.
- Chat tests: WebSocket authentication, message send/receive round-trip, message persistence, group routing; optional mark-read.
- API tests: All endpoints with 2xx on valid and 4xx/403 on invalid permissions.
- Coverage: executed to ensure code paths exercised; failures resolved by adjusting view permissions or serializer validation.

==================================================
11) INSTALLATION, UNZIP, RUN, AND WINDOWS/POWERSHELL QUICKSTART
==================================================
Unzip:
- Extract the project ZIP to a local folder, e.g., `elearning_app/`.

Create virtual environment and install packages (Windows PowerShell):
1) `Set-ExecutionPolicy -Scope CurrentUser RemoteSigned`
2) `Set-Location elearning_app`
3) `py -m venv .venv`
4) `..\.venv\Scripts\Activate`
5) `python -m pip install --upgrade pip wheel`
6) `pip install -r requirements.txt`

Environment configuration `.env` (already supported via `python-decouple`):
- Example:
  - `DEBUG=True`
  - `SECRET_KEY=dev-secret-key-change-me`
  - `ALLOWED_HOSTS=127.0.0.1,localhost`
  - `REDIS_URL=redis://127.0.0.1:6379/0`

Database and Redis:
- `python manage.py makemigrations`
- `python manage.py migrate`
- Optionally: `python manage.py loaddata fixtures/sample_data.json`
- Start Redis (Docker recommended): `docker run -d --name redis -p 6379:6379 redis:7` (or Memurai/WSL)

Run server:
- `python manage.py runserver 127.0.0.1:8000`

Unit tests:
- `python manage.py test`
- Coverage (optional): `pip install coverage && python -m coverage run manage.py test && python -m coverage report && python -m coverage html`

==================================================
12) PACKAGE LIST (PINNED) AND DEVELOPMENT ENVIRONMENT
==================================================
- Python 3.12.3 (works on 3.9+). OS: Windows 11 for dev; Ubuntu 20.04+ for prod.
- requirements.txt (pinned): Django 4.2.7; djangorestframework 3.14.0; django-cors-headers 4.3.1; channels 4.0.0; channels-redis 4.1.0; django-crispy-forms 2.1; crispy-bootstrap4 2022.1; django-filter 23.3; Pillow 10.1.0; redis 5.0.1; daphne 4.2.1; whitenoise 6.6.0; plus ancillary packages (see `requirements.txt`).

==================================================
13) DEMO CREDENTIALS (DEV) AND ADMIN ACCESS
==================================================
- Django admin: `/admin/` — Username: `admin` | Password: `admin123`
- Teacher: `teacher_one` | Password: `testpass123`
- Students: `student_one` | `testpass123`; `student_two` | `testpass123`
- If not present, create via `createsuperuser` and admin interface; or load fixtures.

==================================================
14) DEPLOYMENT (AWS/DIGITALOCEAN) – WHAT TO CONFIGURE
==================================================
- Server deps: `python3-venv`, `nginx`, `postgresql`, `redis-server`.
- DB: create `elearning_db` and `elearning_user`, grant privileges.
- App:
  - Clone to `/var/www/elearning`; `python3 -m venv venv`; `source venv/bin/activate`.
  - `pip install -r requirements.txt`; `pip install gunicorn psycopg2-binary`.
  - `.env` (prod): `DEBUG=False`, strong `SECRET_KEY`, `DATABASE_URL=postgresql://...`, `ALLOWED_HOSTS=domain`, `REDIS_URL=redis://localhost:6379/0`.
  - `python manage.py collectstatic --noinput`
  - `python manage.py migrate`
  - `python manage.py createsuperuser`
- ASGI/WSGI:
  - Serve HTTP via Gunicorn bound to 127.0.0.1:8000 (WSGI/ASGI). For WebSockets, run Daphne on 127.0.0.1:8001 or use an ASGI Gunicorn worker; Nginx routes `/ws/` to the ASGI endpoint with Upgrade headers.
- Nginx site:
  - Proxy `/` to 127.0.0.1:8000; `/static/` and `/media/` from filesystem; `/ws/` with `Upgrade`/`Connection` headers passed through.
- TLS: Certbot automated certificates.
- Systemd services: `gunicorn.service` and optional `daphne.service` for Channels.

Live deployment details (fill after deploy):
- Live App URL: https://_________________________
- Admin URL: https://_________________________/admin/
- Deployed Admin: username __________ | password __________
- Teacher Demo: username __________ | password __________
- Student Demo: username __________ | password __________

==================================================
15) REQUIREMENTS MAPPING (R1–R5) TO CODE (CHECKLIST)
==================================================
R1 Functional:
- a) Create accounts — `POST /api/auth/register/` (serializer + User create); web form alternative.
- b) Login/logout — `POST /api/auth/login/`, `POST /api/auth/logout/`, `POST /api/auth/token/`.
- c) Teacher search — `GET /api/users/?search=...&role=teacher|student` (SearchFilter + filterset).
- d) Add courses — `POST /api/courses/` guarded by `IsTeacher`.
- e) Enroll — `POST /api/courses/<course_id>/enroll/` creates `Enrollment` (unique per student/course).
- f) Leave feedback — `POST /api/feedback/`; edit via `/api/feedback/<id>/` with owner checks.
- g) Real-time chat — Channels consumers; Redis-backed groups; `PrivateMessage` persistence.
- h) Block/remove students — Flag/relationship used by permission checks; 403 returned when blocked.
- i) Status updates — `/api/status-updates/` CRUD, owner-restricted.
- j) Upload materials — `/api/materials/` POST with file validators; listed on course page; permission teacher-only.
- k) Notify teacher on enroll — `post_save(Enrollment)` signal -> Notification + Channels push.
- l) Notify students on new material — `post_save(CourseMaterial)` signal -> Notifications to enrolled students + push.

R2 Engineering:
- a) Models/migrations — FK relations, constraints, indexes; migrations per app.
- b) Forms/validators/serialization — Django forms for web; DRF serializers with custom `validate()`.
- c) DRF usage — Auth, permissions, pagination, filtering; browsable API.
- d) URL routing — `api/urls.py` maps all resources; named routes used in templates/clients.
- e) Unit testing — 71 tests (TestCase, APITestCase, Channels tests).

R3 Database:
- Appropriate schema for users/courses/chat/notifications; normalized; constraints and indexes coded.

R4 REST:
- Complete DRF endpoints implemented for all features (see Section 9); authentication enforced.

R5 Tests:
- Automated tests for models/views/serializers/permissions/Channels.

==================================================
16) LIMITATIONS AND FUTURE ENGINEERING (CODE WORK ONLY)
==================================================
- Frontend SPA migration (React/Vue) with API integration; current Bootstrap templates are minimal.
- Add DRF throttling classes for rate limiting in production.
- Move media to S3 with django-storages; signed URLs; background processing for large files.
- Add async DRF views where safe for I/O-bound endpoints (Django 4 async support).
- Enhance search (Elasticsearch) across users/courses/materials.
- Introduce celery for email notifications and heavy tasks; current code uses signals + Channels only.

==================================================
17) CONCLUSION (CODING SUMMARY)
==================================================
The codebase fulfills R1–R5 by combining well-structured Django apps, DRF endpoints, Channels-based real-time features, and a robust testing suite. Models encode relationships and constraints (R3). Serializers and permissions enforce invariants. URL routing is explicit and RESTful. Signals translate domain events (enroll/material upload) into database notifications and WebSocket pushes. Tests ensure regressions are caught. The deployment path codifies ASGI, Redis, and Nginx for production readiness.

END OF REPORT
