# Generated by Django 4.2.7 on 2025-08-10 15:38

import courses.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Course title', max_length=200)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('description', models.TextField(help_text='Detailed course description')),
                ('short_description', models.CharField(help_text='Brief description shown in course listings', max_length=300)),
                ('category', models.CharField(blank=True, max_length=100)),
                ('difficulty_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], default='beginner', max_length=20)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('archived', 'Archived')], default='draft', max_length=20)),
                ('course_image', models.ImageField(blank=True, help_text='Course thumbnail image', upload_to=courses.models.course_image_upload_path)),
                ('max_students', models.PositiveIntegerField(default=50, help_text='Maximum number of students that can enroll', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(500)])),
                ('is_free', models.BooleanField(default=True, help_text='Is this course free?')),
                ('price', models.DecimalField(decimal_places=2, default=0.0, help_text='Course price (if not free)', max_digits=8)),
                ('prerequisites', models.TextField(blank=True, help_text='What students should know before taking this course')),
                ('learning_outcomes', models.TextField(blank=True, help_text='What students will learn from this course')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('meta_description', models.CharField(blank=True, max_length=160)),
                ('tags', models.CharField(blank=True, help_text='Comma-separated tags', max_length=200)),
                ('teacher', models.ForeignKey(limit_choices_to={'user_type': 'teacher'}, on_delete=django.db.models.deletion.CASCADE, related_name='taught_courses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Course',
                'verbose_name_plural': 'Courses',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CourseMaterial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('file', models.FileField(blank=True, help_text='Upload a file (PDF, video, audio, etc.)', upload_to=courses.models.course_material_upload_path)),
                ('external_link', models.URLField(blank=True, help_text='External link (YouTube, Google Drive, etc.)')),
                ('material_type', models.CharField(choices=[('pdf', 'PDF Document'), ('video', 'Video'), ('image', 'Image'), ('audio', 'Audio'), ('document', 'Document'), ('link', 'External Link'), ('other', 'Other')], default='document', max_length=20)),
                ('order', models.PositiveIntegerField(default=0, help_text='Display order')),
                ('is_downloadable', models.BooleanField(default=True, help_text='Allow students to download this material')),
                ('is_public', models.BooleanField(default=False, help_text='Make this material public (visible without enrollment)')),
                ('file_size', models.PositiveIntegerField(blank=True, help_text='File size in bytes', null=True)),
                ('duration', models.CharField(blank=True, help_text='Duration for video/audio', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='materials', to='courses.course')),
            ],
            options={
                'verbose_name': 'Course Material',
                'verbose_name_plural': 'Course Materials',
                'ordering': ['order', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('enrollment', 'New Enrollment'), ('material', 'New Material Added'), ('feedback', 'New Feedback'), ('announcement', 'Course Announcement'), ('reminder', 'Reminder'), ('system', 'System Notification')], max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('is_important', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='courses.course')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sent_notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['recipient', '-created_at'], name='courses_not_recipie_89b4be_idx'), models.Index(fields=['is_read', '-created_at'], name='courses_not_is_read_997132_idx')],
            },
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveIntegerField(help_text='Rating from 1 to 5 stars', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('title', models.CharField(help_text='Feedback title', max_length=200)),
                ('content', models.TextField(help_text='Detailed feedback')),
                ('is_anonymous', models.BooleanField(default=False, help_text='Hide your name from this feedback')),
                ('is_approved', models.BooleanField(default=True, help_text='Is this feedback approved for display?')),
                ('helpful_votes', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedbacks', to='courses.course')),
                ('student', models.ForeignKey(limit_choices_to={'user_type': 'student'}, on_delete=django.db.models.deletion.CASCADE, related_name='course_feedbacks', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Course Feedback',
                'verbose_name_plural': 'Course Feedbacks',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['course', '-created_at'], name='courses_fee_course__4bdeb8_idx'), models.Index(fields=['rating', '-created_at'], name='courses_fee_rating_b9012c_idx')],
                'unique_together': {('course', 'student')},
            },
        ),
        migrations.CreateModel(
            name='Enrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_enrolled', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('progress', models.PositiveIntegerField(default=0, help_text='Course completion percentage', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('date_completed', models.DateTimeField(blank=True, null=True)),
                ('certificate_issued', models.BooleanField(default=False)),
                ('notes', models.TextField(blank=True, help_text='Private notes for this enrollment')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='courses.course')),
                ('student', models.ForeignKey(limit_choices_to={'user_type': 'student'}, on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Enrollment',
                'verbose_name_plural': 'Enrollments',
                'ordering': ['-date_enrolled'],
                'indexes': [models.Index(fields=['student', '-date_enrolled'], name='courses_enr_student_2e8a2b_idx'), models.Index(fields=['course', 'is_active'], name='courses_enr_course__4313b8_idx')],
                'unique_together': {('student', 'course')},
            },
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['status', '-created_at'], name='courses_cou_status_41eebb_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['teacher', '-created_at'], name='courses_cou_teacher_e90956_idx'),
        ),
    ]
